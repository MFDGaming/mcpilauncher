diff --git a/linux-user/syscall.c b/linux-user/syscall.c
index e4825747f9..bba9526a25 100644
--- a/linux-user/syscall.c
+++ b/linux-user/syscall.c
@@ -17,6 +17,7 @@
  *  along with this program; if not, see <http://www.gnu.org/licenses/>.
  */
 #define _ATFILE_SOURCE
+#include <dlfcn.h>
 #include "qemu/osdep.h"
 #include "qemu/cutils.h"
 #include "qemu/path.h"
@@ -7862,6 +7863,16 @@ static int host_to_target_cpu_mask(const unsigned long *host_mask,
     return 0;
 }
 
+// XXX
+void* _g2h(void* x);
+void* _g2h(void* x) {
+    return g2h(x);
+}
+
+static void* _libtrampoline_handle;
+static void (*_set_guest_to_host_handle)(void* (*)(void*));
+static int (*_trampoline)(const char*, uint32_t*);
+
 /* do_syscall() should always have a single exit point at the end so
    that actions, such as logging of syscall results, can be performed.
    All errnos that do_syscall() returns must be -TARGET_<errcode>. */
@@ -7899,6 +7910,23 @@ abi_long do_syscall(void *cpu_env, int num, abi_long arg1,
         print_syscall(num, arg1, arg2, arg3, arg4, arg5, arg6);
 
     switch(num) {
+    case 0x1337: {
+        if(_libtrampoline_handle == NULL) {
+            _libtrampoline_handle = dlopen("libtrampoline.so", RTLD_NOW);
+        }
+
+        if(_set_guest_to_host_handle == NULL) {
+            _set_guest_to_host_handle = dlsym(_libtrampoline_handle, "set_guest_to_host_handle");
+            _set_guest_to_host_handle(_g2h);
+        }
+
+        if(_trampoline == NULL) {
+            _trampoline = dlsym(_libtrampoline_handle, "trampoline");
+        }
+
+        ret = _trampoline((const char*) g2h(arg1), g2h(arg2));
+    }
+    break;
     case TARGET_NR_exit:
         /* In old applications this may be used to implement _exit(2).
            However in threaded applictions it is used for thread termination,
